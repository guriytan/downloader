package org.guriytan.downloader.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import org.guriytan.downloader.entity.DownloadTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_TASK".
*/
public class DownloadTaskDao extends AbstractDao<DownloadTask, Long> {

    public static final String TABLENAME = "DOWNLOAD_TASK";

    /**
     * Properties of entity DownloadTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TaskId = new Property(1, String.class, "taskId", false, "TASK_ID");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property FilePath = new Property(3, String.class, "filePath", false, "FILE_PATH");
        public final static Property FileName = new Property(4, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileSize = new Property(5, long.class, "fileSize", false, "FILE_SIZE");
        public final static Property DownloadSize = new Property(6, long.class, "downloadSize", false, "DOWNLOAD_SIZE");
        public final static Property TaskStatus = new Property(7, int.class, "taskStatus", false, "TASK_STATUS");
        public final static Property TaskType = new Property(8, int.class, "taskType", false, "TASK_TYPE");
        public final static Property Speed = new Property(9, long.class, "speed", false, "SPEED");
        public final static Property Date = new Property(10, java.util.Date.class, "date", false, "DATE");
    }


    public DownloadTaskDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TASK_ID\" TEXT," + // 1: taskId
                "\"URL\" TEXT," + // 2: url
                "\"FILE_PATH\" TEXT," + // 3: filePath
                "\"FILE_NAME\" TEXT," + // 4: fileName
                "\"FILE_SIZE\" INTEGER NOT NULL ," + // 5: fileSize
                "\"DOWNLOAD_SIZE\" INTEGER NOT NULL ," + // 6: downloadSize
                "\"TASK_STATUS\" INTEGER NOT NULL ," + // 7: taskStatus
                "\"TASK_TYPE\" INTEGER NOT NULL ," + // 8: taskType
                "\"SPEED\" INTEGER NOT NULL ," + // 9: speed
                "\"DATE\" INTEGER);"); // 10: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(2, taskId);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(4, filePath);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
        stmt.bindLong(6, entity.getFileSize());
        stmt.bindLong(7, entity.getDownloadSize());
        stmt.bindLong(8, entity.getTaskStatus());
        stmt.bindLong(9, entity.getTaskType());
        stmt.bindLong(10, entity.getSpeed());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(11, date.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(2, taskId);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(4, filePath);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
        stmt.bindLong(6, entity.getFileSize());
        stmt.bindLong(7, entity.getDownloadSize());
        stmt.bindLong(8, entity.getTaskStatus());
        stmt.bindLong(9, entity.getTaskType());
        stmt.bindLong(10, entity.getSpeed());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(11, date.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadTask readEntity(Cursor cursor, int offset) {
        DownloadTask entity = new DownloadTask( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // filePath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fileName
            cursor.getLong(offset + 5), // fileSize
            cursor.getLong(offset + 6), // downloadSize
            cursor.getInt(offset + 7), // taskStatus
            cursor.getInt(offset + 8), // taskType
            cursor.getLong(offset + 9), // speed
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadTask entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFilePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFileSize(cursor.getLong(offset + 5));
        entity.setDownloadSize(cursor.getLong(offset + 6));
        entity.setTaskStatus(cursor.getInt(offset + 7));
        entity.setTaskType(cursor.getInt(offset + 8));
        entity.setSpeed(cursor.getLong(offset + 9));
        entity.setDate(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadTask entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadTask entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadTask entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
